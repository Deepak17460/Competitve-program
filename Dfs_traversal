
void dfs(int node,vector<int>&component,unordered_map<int, list<int> >&adlist,unordered_map<int,bool>&visited){
    component.push_back(node);
    visited[node]=true;
    for(auto i :adlist[node]){
        if(!visited[i]){
            dfs(i,component,adlist,visited);
        }
    }
}
vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    // preparedadlist
    unordered_map<int, list<int> >adlist;
    for(int i=0;i<edges.size();i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adlist[u].push_back(v);
        adlist[v].push_back(u);
    }
    vector<vector<int>>ans;
    unordered_map<int,bool>visited;
    for(int i=0;i<V;i++){
        vector<int>component;
        if(!visited[i]){
            dfs(i,component,adlist,visited);
            ans.push_back(component);
        }
    }
    return ans;
}








