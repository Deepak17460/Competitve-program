#include<bits/stdc++.h>

void bfs(vector<int>&ans,unordered_map<int,set<int>>&adjlist ,int node, unordered_map<int,bool>&visited){
    queue<int>q;
    q.push(node);
    visited[node]=1;
    while(!q.empty()){
        int frontNode=q.front();
        q.pop();
        ans.push_back(frontNode);
        for(auto i : adjlist[frontNode]){
            if(!visited[i]){
                q.push(i);
                visited[i]=1;
            }
        }
    }
}
void prepareAdj( unordered_map<int,set<int>>&adjlist,vector<pair<int, int>> &edges){
    for(int i=0;i<edges.size();i++){
        int u=edges[i].first;
        int v=edges[i].second;
        adjlist[u].insert(v);
        adjlist[v].insert(u);
    }
}
void printAdjlist( unordered_map<int,set<int>>&adjlist){
    for(auto i :adjlist){
        cout<<i.first<<"->";
        for(auto j:i.second){
            cout<<j<<" ";
        }
        cout<<endl;
    }
}
void printvisited( unordered_map<int,bool>&visited){
    for(auto i : visited){
        cout<<i.first<<" "<<i.second<<endl;
    }
    cout<<endl;
}
vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    unordered_map<int,set<int>>adjlist;
    vector<int>ans;
    unordered_map<int,bool>visited;
    prepareAdj(adjlist,edges);
    for(int i=0;i<vertex;i++){
        if(!visited[i]){
            bfs(ans,adjlist,i,visited);
        }
    }
    //printvisited(visited);
    //printAdjlist(adjlist);
    return ans;
}
