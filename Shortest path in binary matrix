Code->


class Solution {
    // Time Complexity is O(N) & Space complexity is O(N)
    
     bool isInvalid(int r, int c, int n)
    {
        return r < 0 || r >= n || c < 0 || c >= n;
    }
    
public:
    
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        queue<pair<int, int>> q;        
        
        if (grid[0][0] == 1 || grid[n - 1][n - 1])
            return -1;
        
        if (n == 1)
            return 1;
        
        q.push({0, 0});
        grid[0][0] = 1;
        int path = 0;
        
        static const vector<pair<int, int>> off {
            {-1,-1},
            {-1, 0},
            {-1, 1},
            { 0,-1},
            { 0, 1},
            { 1,-1},
            { 1, 0},
            { 1, 1}};
        
        while (!q.empty())
        {
            int sz = q.size();
            path++;
            
            while (sz-- > 0)
            {
                int r = q.front().first, c = q.front().second;
                q.pop();
                for (const auto& o: off)
                {
                    int nR = r + o.first, nC = c + o.second;

                    if (isInvalid(nR, nC, n) || grid[nR][nC] != 0)
                        continue;

                    if (nR == n - 1 && nC == n - 1)
                        return path + 1;

                    q.push({nR, nC});
                    grid[nR][nC] = 1;
                }
            }
        }
        
        return -1;
	}
};
